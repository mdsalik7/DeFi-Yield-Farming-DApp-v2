{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\Github\\\\yield-farm\\\\src\\\\components\\\\Main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport Web3 from 'web3';\nimport { useUser } from '../context/UserContext';\nimport { useContract } from '../context/ContractContext';\nimport Dai from '../abi/Dai.json';\nimport HodlToken from '../abi/HodlToken.json';\nimport HodlFarm from '../abi/HodlFarm.json';\nimport NavBar from './NavBar';\nimport StakeBox from './StakeBox';\nimport YieldBox from './YieldBox';\nconst Container = styled.div`\n    margin-top: 2rem;\n    width: 100%;\n    height 25rem;\n`;\n_c = Container;\nconst Boxes = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n_c2 = Boxes;\nconst web3 = new Web3(Web3.givenProvider);\nconst hodlFarmAddress = '0xb3A7bC3fB20c289311e91dfE778d16590884e6F9';\nconst hodlTokenAddress = '0xec1285C81Ef9d039A46896e09f8f29dEb7d0556e';\nconst daiAddress = '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa';\nconst dai = new web3.eth.Contract(Dai.abi, daiAddress);\nconst hodlToken = new web3.eth.Contract(HodlToken.abi, hodlTokenAddress);\nconst hodlFarm = new web3.eth.Contract(HodlFarm.abi, hodlFarmAddress); //Helper Function - These functions convert to/from wei from/to eth.\n\nconst toWei = n => {\n  return web3.utils.toWei(n, 'ether');\n};\n\nconst fromWei = n => {\n  return web3.utils.fromWei(n, 'ether');\n};\n\nexport default function Main() {\n  _s();\n\n  //This lists the dApp's state fetched from useContext. The UserContext is declared first.\n  const {\n    userAddress,\n    setUserAddress,\n    setDaiBalance,\n    stakingBalance,\n    setStakingBalance,\n    isStaking,\n    setIsStaking,\n    setHodlBalance,\n    setHodlYield,\n    hodlYield\n  } = useUser(); //The following declares the ContractContext.\n\n  const {\n    setNetwork,\n    sentStake,\n    setSentStake,\n    sentUnstake,\n    setSentUnstake,\n    sentWithdrawal,\n    setSentWithdrawal\n  } = useContract();\n  /*\r\n   The following functions are used for fetching both user and contract data. These functions are read-only\r\n  regarding the blockchain.\r\n   */\n\n  const loadUser = async () => {\n    let accounts = await web3.eth.getAccounts();\n    let account = accounts[0];\n    return account;\n  };\n\n  const loadNetwork = useCallback(async () => {\n    let num = await web3.currentProvider.chainId;\n\n    if (num === '0x1') {\n      setNetwork('Mainnet');\n    } else if (num === '0x3') {\n      setNetwork('Ropsten');\n    } else if (num === '0x4') {\n      setNetwork('Rinkeby');\n    } else if (num === '0x5') {\n      setNetwork('Goerli');\n    } else if (num === '0x2a') {\n      setNetwork('Kovan');\n    } else {\n      setNetwork('N/A');\n    }\n  }, [setNetwork]);\n  const loadDaiBalance = useCallback(async usr => {\n    let bal = await dai.methods.balanceOf(usr.toString()).call();\n    let formatBal = fromWei(bal);\n\n    if (formatBal.length > 5) {\n      setDaiBalance(Number.parseFloat(formatBal).toPrecision(4));\n    } else {\n      setDaiBalance(formatBal);\n    }\n  }, [setDaiBalance]);\n  const loadStakingBalance = useCallback(async usr => {\n    let bal = await hodlFarm.methods.stakingBalance(usr.toString()).call();\n    let formatBal = fromWei(bal);\n\n    if (formatBal.length > 5) {\n      setStakingBalance(Number.parseFloat(fromWei(bal)).toPrecision(4));\n    } else {\n      setStakingBalance(formatBal);\n    }\n\n    if (bal > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }, [setStakingBalance]);\n  /**\r\n  This function fetches the current yield accrued by user's stake.\r\n  This operates almost exactly as in the Solidity contract for withdrawing yield. First, we fetch the number of \r\n  minutes staked. Then, it saves the quotient of dividing the product (staking balance times the number of minutes)\r\n  by 100 (creating 1% of staked balance per minute).\r\n  Before adding the initYield with the savedYield, they're both multiplied\r\n  by one. This turns the string balances into numbers; otherwise, they concatenate.\r\n  */\n\n  const loadHodlYield = useCallback(async usr => {\n    let numOfMinutes = await hodlFarm.methods.calculateYieldTime(usr).call();\n    let initYield = stakingBalance * numOfMinutes / 100;\n    let savedYield = await hodlFarm.methods.hodlBalance(usr).call();\n    let balA = initYield * 1; //These variables convert the fetched strings into numbers\n\n    let balB = fromWei(savedYield) * 1;\n    let totalYield = balA + balB;\n\n    if (totalYield.toString().length > 5) {\n      return Number.parseFloat(totalYield).toPrecision(3);\n    } else {\n      return totalYield;\n    }\n  }, [stakingBalance]);\n  const loadHodlBalance = useCallback(async usr => {\n    let bal = await hodlToken.methods.balanceOf(usr).call();\n    let formatBal = fromWei(bal);\n\n    if (formatBal.length > 5) {\n      return Number.parseFloat(fromWei(bal)).toFixed(4);\n    } else {\n      return formatBal;\n    }\n  }, []); //The componentDidMount function initializes all of the previous functions for the useEffect hook.\n\n  const componentDidMount = useCallback(async () => {\n    await loadNetwork();\n    await loadUser().then(response => {\n      setUserAddress(response);\n      loadDaiBalance(response);\n      loadHodlYield(response);\n      loadHodlBalance(response).then(response => {\n        setHodlBalance(response);\n      });\n      loadStakingBalance(response).then(response => {\n        setIsStaking(response);\n      });\n    });\n  }, [loadDaiBalance, loadStakingBalance, loadNetwork, loadHodlYield, loadHodlBalance, setUserAddress, setHodlBalance, setIsStaking]);\n  useEffect(() => {\n    if (userAddress === '') {\n      componentDidMount();\n    }\n  }, [userAddress, componentDidMount]);\n  /*\r\n  This useEffect hook fetches the side effects of the loadHodlYield\r\n  function in order to display the user's current yield.\r\n  */\n\n  useEffect(() => {\n    if (stakingBalance > 0 || userAddress !== '') {\n      loadHodlYield(userAddress).then(response => {\n        setHodlYield(response);\n      });\n    }\n  }, [userAddress, stakingBalance, hodlYield, isStaking, setHodlYield, loadHodlYield, setIsStaking]); //This useEffect creates a 60 second timer when the staking mechanism is triggered.\n\n  useEffect(() => {\n    let interval = null;\n\n    if (isStaking) {\n      interval = setInterval(() => {\n        loadHodlYield(userAddress).then(response => {\n          setHodlYield(response);\n        });\n      }, 60000);\n    }\n\n    return () => clearInterval(interval);\n  }, [isStaking, userAddress, loadHodlYield, setHodlYield]);\n  /*\r\n   The following functions write to the smart contract.\r\n   This function locks up ('stakes') Dai in the contract.\r\n   The sentStake, sentUnstake, and sentWithdrawal boolean values \r\n   are used as signals for the useEffect hook. Instead of setting\r\n   their default value to false, they're triggered to false in the\r\n   beginning of the function call. Upon receipt, they're switched to \r\n   'on.'\r\n   x - This is the amount of Dai to stake in the contract.\r\n   */\n\n  const stake = async x => {\n    setSentStake(false);\n    let utils = {\n      from: userAddress\n    };\n    let bal = toWei(x);\n    await dai.methods.approve(hodlFarmAddress, bal).send(utils);\n    await hodlFarm.methods.stake(bal).send(utils).on('receipt', function (receipt) {\n      console.log(receipt);\n      setSentStake(true);\n    });\n    setIsStaking(true);\n  };\n\n  const unstake = async () => {\n    setSentUnstake(false);\n    let utils = {\n      from: userAddress\n    };\n    await hodlFarm.methods.unstake().send(utils).on('receipt', function (receipt) {\n      console.log(receipt);\n      setSentUnstake(true);\n    });\n    setIsStaking(false);\n  };\n\n  const withdrawYield = async () => {\n    setSentWithdrawal(false);\n    let utils = {\n      from: userAddress\n    };\n    await hodlFarm.methods.withdrawYield().send(utils).on('receipt', function (receipt) {\n      console.log(receipt);\n      setSentWithdrawal(true);\n    });\n  }; //waiting to fetch new balance after function call\n  //for dai\n\n  /*\r\n   * @notiThese useEffect hooks are triggered by the preceding functions.\r\n   *         The former hook fetches the Dai balances (Dai balance and stakingBalance).\r\n   *         The latter effect fetches the hodlToken balance and current yield.\r\n   */\n\n\n  useEffect(() => {\n    if (sentStake || sentUnstake) {\n      loadDaiBalance(userAddress);\n      loadStakingBalance(userAddress);\n    }\n  }, [sentStake, sentUnstake, userAddress, loadDaiBalance, loadStakingBalance]);\n  useEffect(() => {\n    if (sentWithdrawal) {\n      loadHodlBalance(userAddress).then(res => {\n        setHodlBalance(res);\n      });\n      setHodlYield(0);\n    }\n  }, [sentWithdrawal, userAddress, loadHodlBalance, setHodlYield, setHodlBalance]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Boxes, {\n        children: [/*#__PURE__*/_jsxDEV(StakeBox, {\n          stake: stake,\n          unstake: unstake\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YieldBox, {\n          withdrawYield: withdrawYield\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"S8Ak1317xEMJrmmPiSZ1rp/AZmE=\", false, function () {\n  return [useUser, useContract];\n});\n\n_c3 = Main;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Boxes\");\n$RefreshReg$(_c3, \"Main\");","map":{"version":3,"sources":["E:/Github/yield-farm/src/components/Main.jsx"],"names":["React","useEffect","useCallback","styled","Web3","useUser","useContract","Dai","HodlToken","HodlFarm","NavBar","StakeBox","YieldBox","Container","div","Boxes","web3","givenProvider","hodlFarmAddress","hodlTokenAddress","daiAddress","dai","eth","Contract","abi","hodlToken","hodlFarm","toWei","n","utils","fromWei","Main","userAddress","setUserAddress","setDaiBalance","stakingBalance","setStakingBalance","isStaking","setIsStaking","setHodlBalance","setHodlYield","hodlYield","setNetwork","sentStake","setSentStake","sentUnstake","setSentUnstake","sentWithdrawal","setSentWithdrawal","loadUser","accounts","getAccounts","account","loadNetwork","num","currentProvider","chainId","loadDaiBalance","usr","bal","methods","balanceOf","toString","call","formatBal","length","Number","parseFloat","toPrecision","loadStakingBalance","loadHodlYield","numOfMinutes","calculateYieldTime","initYield","savedYield","hodlBalance","balA","balB","totalYield","loadHodlBalance","toFixed","componentDidMount","then","response","interval","setInterval","clearInterval","stake","x","from","approve","send","on","receipt","console","log","unstake","withdrawYield","res"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,MAAMC,SAAS,GAAGV,MAAM,CAACW,GAAI;AAC7B;AACA;AACA;AACA,CAJA;KAAMD,S;AAMN,MAAME,KAAK,GAAGZ,MAAM,CAACW,GAAI;AACzB;AACA;AACA,CAHA;MAAMC,K;AAMN,MAAMC,IAAI,GAAG,IAAIZ,IAAJ,CAASA,IAAI,CAACa,aAAd,CAAb;AACA,MAAMC,eAAe,GAAG,4CAAxB;AACA,MAAMC,gBAAgB,GAAG,4CAAzB;AACA,MAAMC,UAAU,GAAG,4CAAnB;AACA,MAAMC,GAAG,GAAG,IAAIL,IAAI,CAACM,GAAL,CAASC,QAAb,CAAsBhB,GAAG,CAACiB,GAA1B,EAA+BJ,UAA/B,CAAZ;AACA,MAAMK,SAAS,GAAG,IAAIT,IAAI,CAACM,GAAL,CAASC,QAAb,CAAsBf,SAAS,CAACgB,GAAhC,EAAqCL,gBAArC,CAAlB;AACA,MAAMO,QAAQ,GAAG,IAAIV,IAAI,CAACM,GAAL,CAASC,QAAb,CAAsBd,QAAQ,CAACe,GAA/B,EAAoCN,eAApC,CAAjB,C,CAGA;;AAGA,MAAMS,KAAK,GAAIC,CAAD,IAAO;AACjB,SAAOZ,IAAI,CAACa,KAAL,CAAWF,KAAX,CAAiBC,CAAjB,EAAoB,OAApB,CAAP;AACH,CAFD;;AAIA,MAAME,OAAO,GAAIF,CAAD,IAAO;AACnB,SAAOZ,IAAI,CAACa,KAAL,CAAWC,OAAX,CAAmBF,CAAnB,EAAsB,OAAtB,CAAP;AACH,CAFD;;AAKA,eAAe,SAASG,IAAT,GAAgB;AAAA;;AAI3B;AACA,QAAM;AACFC,IAAAA,WADE;AAEFC,IAAAA,cAFE;AAGFC,IAAAA,aAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA,iBALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA,YAPE;AAQFC,IAAAA,cARE;AASFC,IAAAA,YATE;AAUFC,IAAAA;AAVE,MAWFpC,OAAO,EAXX,CAL2B,CAkB3B;;AAEA,QAAM;AACFqC,IAAAA,UADE;AAEFC,IAAAA,SAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,WAJE;AAKFC,IAAAA,cALE;AAMFC,IAAAA,cANE;AAOFC,IAAAA;AAPE,MAQF1C,WAAW,EARf;AAWA;AACJ;AACA;AACA;;AAEI,QAAM2C,QAAQ,GAAG,YAAW;AACxB,QAAIC,QAAQ,GAAG,MAAMlC,IAAI,CAACM,GAAL,CAAS6B,WAAT,EAArB;AACA,QAAIC,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAtB;AACA,WAAOE,OAAP;AACH,GAJD;;AAOA,QAAMC,WAAW,GAAGnD,WAAW,CAAC,YAAW;AACvC,QAAIoD,GAAG,GAAG,MAAMtC,IAAI,CAACuC,eAAL,CAAqBC,OAArC;;AACA,QAAGF,GAAG,KAAK,KAAX,EAAiB;AACbZ,MAAAA,UAAU,CAAC,SAAD,CAAV;AACH,KAFD,MAEO,IAAGY,GAAG,KAAK,KAAX,EAAiB;AACpBZ,MAAAA,UAAU,CAAC,SAAD,CAAV;AACH,KAFM,MAEA,IAAGY,GAAG,KAAK,KAAX,EAAiB;AACpBZ,MAAAA,UAAU,CAAC,SAAD,CAAV;AACH,KAFM,MAEA,IAAGY,GAAG,KAAK,KAAX,EAAiB;AACpBZ,MAAAA,UAAU,CAAC,QAAD,CAAV;AACH,KAFM,MAEA,IAAGY,GAAG,KAAK,MAAX,EAAkB;AACrBZ,MAAAA,UAAU,CAAC,OAAD,CAAV;AACH,KAFM,MAEA;AACHA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAf8B,EAe5B,CAACA,UAAD,CAf4B,CAA/B;AAkBA,QAAMe,cAAc,GAAGvD,WAAW,CAAC,MAAMwD,GAAN,IAAc;AAC7C,QAAIC,GAAG,GAAG,MAAMtC,GAAG,CAACuC,OAAJ,CAAYC,SAAZ,CAAsBH,GAAG,CAACI,QAAJ,EAAtB,EAAsCC,IAAtC,EAAhB;AACA,QAAIC,SAAS,GAAGlC,OAAO,CAAC6B,GAAD,CAAvB;;AACA,QAAGK,SAAS,CAACC,MAAV,GAAmB,CAAtB,EAAwB;AACpB/B,MAAAA,aAAa,CAACgC,MAAM,CAACC,UAAP,CAAkBH,SAAlB,EAA6BI,WAA7B,CAAyC,CAAzC,CAAD,CAAb;AACH,KAFD,MAEO;AACHlC,MAAAA,aAAa,CAAC8B,SAAD,CAAb;AACH;AACJ,GARiC,EAQ/B,CAAC9B,aAAD,CAR+B,CAAlC;AAWA,QAAMmC,kBAAkB,GAAGnE,WAAW,CAAC,MAAMwD,GAAN,IAAc;AACjD,QAAIC,GAAG,GAAG,MAAMjC,QAAQ,CAACkC,OAAT,CAAiBzB,cAAjB,CAAgCuB,GAAG,CAACI,QAAJ,EAAhC,EAAgDC,IAAhD,EAAhB;AACA,QAAIC,SAAS,GAAGlC,OAAO,CAAC6B,GAAD,CAAvB;;AACA,QAAGK,SAAS,CAACC,MAAV,GAAmB,CAAtB,EAAyB;AACrB7B,MAAAA,iBAAiB,CAAC8B,MAAM,CAACC,UAAP,CAAkBrC,OAAO,CAAC6B,GAAD,CAAzB,EAAgCS,WAAhC,CAA4C,CAA5C,CAAD,CAAjB;AACH,KAFD,MAEO;AACHhC,MAAAA,iBAAiB,CAAC4B,SAAD,CAAjB;AACH;;AACD,QAAKL,GAAG,GAAG,CAAX,EAAa;AACT,aAAO,IAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;AACJ,GAbqC,EAanC,CAACvB,iBAAD,CAbmC,CAAtC;AAeJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAMkC,aAAa,GAAGpE,WAAW,CAAC,MAAMwD,GAAN,IAAc;AAC5C,QAAIa,YAAY,GAAG,MAAM7C,QAAQ,CAACkC,OAAT,CAAiBY,kBAAjB,CAAoCd,GAApC,EAAyCK,IAAzC,EAAzB;AACA,QAAIU,SAAS,GAAKtC,cAAc,GAAGoC,YAAlB,GAAkC,GAAnD;AACA,QAAIG,UAAU,GAAG,MAAMhD,QAAQ,CAACkC,OAAT,CAAiBe,WAAjB,CAA6BjB,GAA7B,EAAkCK,IAAlC,EAAvB;AAEA,QAAIa,IAAI,GAAIH,SAAD,GAAY,CAAvB,CAL4C,CAKd;;AAC9B,QAAII,IAAI,GAAI/C,OAAO,CAAC4C,UAAD,CAAR,GAAsB,CAAjC;AACA,QAAII,UAAU,GAAIF,IAAI,GAAGC,IAAzB;;AAEA,QAAGC,UAAU,CAAChB,QAAX,GAAsBG,MAAtB,GAA+B,CAAlC,EAAqC;AACjC,aAAOC,MAAM,CAACC,UAAP,CAAkBW,UAAlB,EAA8BV,WAA9B,CAA0C,CAA1C,CAAP;AACH,KAFD,MAEO;AACH,aAAOU,UAAP;AACH;AACJ,GAdgC,EAc9B,CAAC3C,cAAD,CAd8B,CAAjC;AAiBA,QAAM4C,eAAe,GAAG7E,WAAW,CAAC,MAAMwD,GAAN,IAAc;AAC9C,QAAIC,GAAG,GAAG,MAAMlC,SAAS,CAACmC,OAAV,CAAkBC,SAAlB,CAA4BH,GAA5B,EAAiCK,IAAjC,EAAhB;AACA,QAAIC,SAAS,GAAGlC,OAAO,CAAC6B,GAAD,CAAvB;;AACA,QAAGK,SAAS,CAACC,MAAV,GAAmB,CAAtB,EAAyB;AACrB,aAAOC,MAAM,CAACC,UAAP,CAAkBrC,OAAO,CAAC6B,GAAD,CAAzB,EAAgCqB,OAAhC,CAAwC,CAAxC,CAAP;AACH,KAFD,MAEO;AACH,aAAOhB,SAAP;AACH;AACJ,GARkC,EAQhC,EARgC,CAAnC,CAhH2B,CA6H3B;;AAGA,QAAMiB,iBAAiB,GAAG/E,WAAW,CAAC,YAAW;AAC7C,UAAMmD,WAAW,EAAjB;AACA,UAAMJ,QAAQ,GAAGiC,IAAX,CAAgBC,QAAQ,IAAI;AAC9BlD,MAAAA,cAAc,CAACkD,QAAD,CAAd;AACA1B,MAAAA,cAAc,CAAC0B,QAAD,CAAd;AACAb,MAAAA,aAAa,CAACa,QAAD,CAAb;AACAJ,MAAAA,eAAe,CAACI,QAAD,CAAf,CAA0BD,IAA1B,CAA+BC,QAAQ,IAAI;AACvC5C,QAAAA,cAAc,CAAC4C,QAAD,CAAd;AACH,OAFD;AAGAd,MAAAA,kBAAkB,CAACc,QAAD,CAAlB,CAA6BD,IAA7B,CAAkCC,QAAQ,IAAI;AAC1C7C,QAAAA,YAAY,CAAC6C,QAAD,CAAZ;AACH,OAFD;AAGH,KAVK,CAAN;AAWH,GAboC,EAalC,CACC1B,cADD,EAECY,kBAFD,EAGChB,WAHD,EAICiB,aAJD,EAKCS,eALD,EAMC9C,cAND,EAOCM,cAPD,EAQCD,YARD,CAbkC,CAArC;AAyBArC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG+B,WAAW,KAAK,EAAnB,EAAsB;AAClBiD,MAAAA,iBAAiB;AACpB;AACJ,GAJQ,EAIN,CAACjD,WAAD,EAAciD,iBAAd,CAJM,CAAT;AAMA;AACJ;AACA;AACA;;AAEIhF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGkC,cAAc,GAAG,CAAjB,IAAsBH,WAAW,KAAK,EAAzC,EAA4C;AACxCsC,MAAAA,aAAa,CAACtC,WAAD,CAAb,CAA2BkD,IAA3B,CAAgCC,QAAQ,IAAI;AACxC3C,QAAAA,YAAY,CAAC2C,QAAD,CAAZ;AACH,OAFD;AAGH;AACJ,GANQ,EAMN,CAACnD,WAAD,EAAcG,cAAd,EAA8BM,SAA9B,EAAyCJ,SAAzC,EAAoDG,YAApD,EAAkE8B,aAAlE,EAAiFhC,YAAjF,CANM,CAAT,CApK2B,CA4K3B;;AAEArC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAImF,QAAQ,GAAG,IAAf;;AACA,QAAG/C,SAAH,EAAa;AACT+C,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACzBf,QAAAA,aAAa,CAACtC,WAAD,CAAb,CAA2BkD,IAA3B,CAAgCC,QAAQ,IAAI;AACxC3C,UAAAA,YAAY,CAAC2C,QAAD,CAAZ;AACH,SAFD;AAGH,OAJqB,EAInB,KAJmB,CAAtB;AAKH;;AACD,WAAO,MAAMG,aAAa,CAACF,QAAD,CAA1B;AACH,GAVQ,EAUN,CAAC/C,SAAD,EAAYL,WAAZ,EAAyBsC,aAAzB,EAAwC9B,YAAxC,CAVM,CAAT;AAYD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAM+C,KAAK,GAAG,MAAMC,CAAN,IAAY;AACtB5C,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,QAAIf,KAAK,GAAG;AAAE4D,MAAAA,IAAI,EAAEzD;AAAR,KAAZ;AACA,QAAI2B,GAAG,GAAGhC,KAAK,CAAC6D,CAAD,CAAf;AACA,UAAMnE,GAAG,CAACuC,OAAJ,CAAY8B,OAAZ,CAAoBxE,eAApB,EAAqCyC,GAArC,EAA0CgC,IAA1C,CAA+C9D,KAA/C,CAAN;AACA,UAAMH,QAAQ,CAACkC,OAAT,CAAiB2B,KAAjB,CAAuB5B,GAAvB,EAA4BgC,IAA5B,CAAiC9D,KAAjC,EACL+D,EADK,CACF,SADE,EACS,UAASC,OAAT,EAAiB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAjD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,KAJK,CAAN;AAKAN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAXD;;AAaA,QAAM0D,OAAO,GAAG,YAAW;AACvBlD,IAAAA,cAAc,CAAC,KAAD,CAAd;AACA,QAAIjB,KAAK,GAAG;AAAE4D,MAAAA,IAAI,EAAEzD;AAAR,KAAZ;AACA,UAAMN,QAAQ,CAACkC,OAAT,CAAiBoC,OAAjB,GAA2BL,IAA3B,CAAgC9D,KAAhC,EACL+D,EADK,CACF,SADE,EACS,UAASC,OAAT,EAAiB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA/C,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAJK,CAAN;AAKAR,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GATD;;AAWA,QAAM2D,aAAa,GAAG,YAAW;AAC7BjD,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA,QAAInB,KAAK,GAAG;AAAE4D,MAAAA,IAAI,EAAEzD;AAAR,KAAZ;AACA,UAAMN,QAAQ,CAACkC,OAAT,CAAiBqC,aAAjB,GAAiCN,IAAjC,CAAsC9D,KAAtC,EACL+D,EADK,CACF,SADE,EACS,UAASC,OAAT,EAAiB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA7C,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH,KAJK,CAAN;AAKH,GARD,CA7N2B,CAwO3B;AACA;;AAEA;AACJ;AACA;AACA;AACA;;;AAEI/C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG0C,SAAS,IAAIE,WAAhB,EAA4B;AACxBY,MAAAA,cAAc,CAACzB,WAAD,CAAd;AACAqC,MAAAA,kBAAkB,CAACrC,WAAD,CAAlB;AACH;AACJ,GALQ,EAKN,CAACW,SAAD,EAAYE,WAAZ,EAAyBb,WAAzB,EAAsCyB,cAAtC,EAAsDY,kBAAtD,CALM,CAAT;AAQIpE,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAG8C,cAAH,EAAkB;AACdgC,MAAAA,eAAe,CAAC/C,WAAD,CAAf,CAA6BkD,IAA7B,CAAkCgB,GAAG,IAAI;AACrC3D,QAAAA,cAAc,CAAC2D,GAAD,CAAd;AACH,OAFD;AAGA1D,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACH;AACJ,GAPY,EAOV,CAACO,cAAD,EAAiBf,WAAjB,EAA8B+C,eAA9B,EAA+CvC,YAA/C,EAA6DD,cAA7D,CAPU,CAAT;AASJ,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAA,6BACI,QAAC,KAAD;AAAA,gCACI,QAAC,QAAD;AACI,UAAA,KAAK,EAAEgD,KADX;AAEI,UAAA,OAAO,EAAES;AAFb;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI,QAAC,QAAD;AAAU,UAAA,aAAa,EAAEC;AAAzB;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAhRuBlE,I;UAgBhB1B,O,EAYAC,W;;;MA5BgByB,I","sourcesContent":["import React, { useEffect, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\n\r\nimport { useUser } from '../context/UserContext'\r\nimport { useContract } from '../context/ContractContext'\r\n\r\nimport Dai from '../abi/Dai.json'\r\nimport HodlToken from '../abi/HodlToken.json'\r\nimport HodlFarm from '../abi/HodlFarm.json'\r\n\r\nimport NavBar from './NavBar'\r\nimport StakeBox from './StakeBox'\r\nimport YieldBox from './YieldBox'\r\n\r\n\r\nconst Container = styled.div`\r\n    margin-top: 2rem;\r\n    width: 100%;\r\n    height 25rem;\r\n`;\r\n\r\nconst Boxes = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n`;\r\n\r\n\r\nconst web3 = new Web3(Web3.givenProvider)\r\nconst hodlFarmAddress = '0xb3A7bC3fB20c289311e91dfE778d16590884e6F9'\r\nconst hodlTokenAddress = '0xec1285C81Ef9d039A46896e09f8f29dEb7d0556e'\r\nconst daiAddress = '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa'\r\nconst dai = new web3.eth.Contract(Dai.abi, daiAddress)\r\nconst hodlToken = new web3.eth.Contract(HodlToken.abi, hodlTokenAddress)\r\nconst hodlFarm = new web3.eth.Contract(HodlFarm.abi, hodlFarmAddress)\r\n\r\n\r\n//Helper Function - These functions convert to/from wei from/to eth.\r\n\r\n\r\nconst toWei = (n) => {\r\n    return web3.utils.toWei(n, 'ether')\r\n}\r\n\r\nconst fromWei = (n) => {\r\n    return web3.utils.fromWei(n, 'ether')\r\n}\r\n\r\n\r\nexport default function Main() {\r\n\r\n\r\n\r\n    //This lists the dApp's state fetched from useContext. The UserContext is declared first.\r\n    const {\r\n        userAddress,\r\n        setUserAddress,\r\n        setDaiBalance,\r\n        stakingBalance,\r\n        setStakingBalance,\r\n        isStaking,\r\n        setIsStaking,\r\n        setHodlBalance,\r\n        setHodlYield,\r\n        hodlYield\r\n    } = useUser();\r\n\r\n    //The following declares the ContractContext.\r\n    \r\n    const {\r\n        setNetwork,\r\n        sentStake,\r\n        setSentStake,\r\n        sentUnstake,\r\n        setSentUnstake,\r\n        sentWithdrawal,\r\n        setSentWithdrawal\r\n    } = useContract();\r\n\r\n\r\n    /*\r\n     The following functions are used for fetching both user and contract data. These functions are read-only\r\n    regarding the blockchain.\r\n     */\r\n\r\n    const loadUser = async() => {\r\n        let accounts = await web3.eth.getAccounts()\r\n        let account = accounts[0]\r\n        return account\r\n    }\r\n\r\n\r\n    const loadNetwork = useCallback(async() => {\r\n        let num = await web3.currentProvider.chainId;\r\n        if(num === '0x1'){\r\n            setNetwork('Mainnet')\r\n        } else if(num === '0x3'){\r\n            setNetwork('Ropsten')\r\n        } else if(num === '0x4'){\r\n            setNetwork('Rinkeby')\r\n        } else if(num === '0x5'){\r\n            setNetwork('Goerli')\r\n        } else if(num === '0x2a'){\r\n            setNetwork('Kovan')\r\n        } else {\r\n            setNetwork('N/A')\r\n        }\r\n    }, [setNetwork])\r\n\r\n\r\n    const loadDaiBalance = useCallback(async(usr) => {\r\n        let bal = await dai.methods.balanceOf(usr.toString()).call()\r\n        let formatBal = fromWei(bal)\r\n        if(formatBal.length > 5){\r\n            setDaiBalance(Number.parseFloat(formatBal).toPrecision(4))\r\n        } else {\r\n            setDaiBalance(formatBal)\r\n        }\r\n    }, [setDaiBalance])\r\n\r\n\r\n    const loadStakingBalance = useCallback(async(usr) => {\r\n        let bal = await hodlFarm.methods.stakingBalance(usr.toString()).call()\r\n        let formatBal = fromWei(bal)\r\n        if(formatBal.length > 5) {\r\n            setStakingBalance(Number.parseFloat(fromWei(bal)).toPrecision(4))\r\n        } else {\r\n            setStakingBalance(formatBal)\r\n        }\r\n        if ( bal > 0){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }, [setStakingBalance])\r\n\r\n/**\r\nThis function fetches the current yield accrued by user's stake.\r\nThis operates almost exactly as in the Solidity contract for withdrawing yield. First, we fetch the number of \r\nminutes staked. Then, it saves the quotient of dividing the product (staking balance times the number of minutes)\r\nby 100 (creating 1% of staked balance per minute).\r\nBefore adding the initYield with the savedYield, they're both multiplied\r\nby one. This turns the string balances into numbers; otherwise, they concatenate.\r\n*/\r\n    const loadHodlYield = useCallback(async(usr) => {\r\n        let numOfMinutes = await hodlFarm.methods.calculateYieldTime(usr).call()\r\n        let initYield = ((stakingBalance * numOfMinutes) / 100)\r\n        let savedYield = await hodlFarm.methods.hodlBalance(usr).call()\r\n\r\n        let balA = (initYield)*1      //These variables convert the fetched strings into numbers\r\n        let balB = (fromWei(savedYield))*1\r\n        let totalYield = (balA + balB)\r\n\r\n        if(totalYield.toString().length > 5) {\r\n            return(Number.parseFloat(totalYield).toPrecision(3))\r\n        } else {\r\n            return totalYield\r\n        }\r\n    }, [stakingBalance])\r\n\r\n\r\n    const loadHodlBalance = useCallback(async(usr) => {\r\n        let bal = await hodlToken.methods.balanceOf(usr).call()\r\n        let formatBal = fromWei(bal)\r\n        if(formatBal.length > 5) {\r\n            return(Number.parseFloat(fromWei(bal)).toFixed(4))\r\n        } else {\r\n            return formatBal\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    \r\n    //The componentDidMount function initializes all of the previous functions for the useEffect hook.\r\n    \r\n\r\n    const componentDidMount = useCallback(async() => {\r\n        await loadNetwork()\r\n        await loadUser().then(response => {\r\n            setUserAddress(response)\r\n            loadDaiBalance(response)\r\n            loadHodlYield(response)\r\n            loadHodlBalance(response).then(response => {\r\n                setHodlBalance(response)\r\n            })\r\n            loadStakingBalance(response).then(response => {\r\n                setIsStaking(response)\r\n            })\r\n        })\r\n    }, [ \r\n        loadDaiBalance, \r\n        loadStakingBalance, \r\n        loadNetwork,\r\n        loadHodlYield,\r\n        loadHodlBalance,\r\n        setUserAddress,\r\n        setHodlBalance,\r\n        setIsStaking,\r\n    ])\r\n\r\n\r\n    useEffect(() => {\r\n        if(userAddress === ''){\r\n            componentDidMount()\r\n        }\r\n    }, [userAddress, componentDidMount])\r\n\r\n    /*\r\n    This useEffect hook fetches the side effects of the loadHodlYield\r\n    function in order to display the user's current yield.\r\n    */\r\n\r\n    useEffect(() => {\r\n        if(stakingBalance > 0 || userAddress !== ''){\r\n            loadHodlYield(userAddress).then(response => {\r\n                setHodlYield(response)\r\n            })\r\n        }\r\n    }, [userAddress, stakingBalance, hodlYield, isStaking, setHodlYield, loadHodlYield, setIsStaking])\r\n\r\n    //This useEffect creates a 60 second timer when the staking mechanism is triggered.\r\n    \r\n    useEffect(() => {\r\n        let interval = null\r\n        if(isStaking){\r\n            interval = setInterval(() => {\r\n                loadHodlYield(userAddress).then(response => {\r\n                    setHodlYield(response)\r\n                })\r\n            }, 60000)\r\n        }\r\n        return () => clearInterval(interval)\r\n    }, [isStaking, userAddress, loadHodlYield, setHodlYield])\r\n\r\n   /*\r\n    The following functions write to the smart contract.\r\n    This function locks up ('stakes') Dai in the contract.\r\n    The sentStake, sentUnstake, and sentWithdrawal boolean values \r\n    are used as signals for the useEffect hook. Instead of setting\r\n    their default value to false, they're triggered to false in the\r\n    beginning of the function call. Upon receipt, they're switched to \r\n    'on.'\r\n    x - This is the amount of Dai to stake in the contract.\r\n    */\r\n\r\n    const stake = async(x) => {\r\n        setSentStake(false)\r\n        let utils = { from: userAddress }\r\n        let bal = toWei(x)\r\n        await dai.methods.approve(hodlFarmAddress, bal).send(utils)\r\n        await hodlFarm.methods.stake(bal).send(utils)\r\n        .on('receipt', function(receipt){\r\n            console.log(receipt)\r\n            setSentStake(true)\r\n        })\r\n        setIsStaking(true)\r\n    }\r\n\r\n    const unstake = async() => {\r\n        setSentUnstake(false)\r\n        let utils = { from: userAddress }\r\n        await hodlFarm.methods.unstake().send(utils)\r\n        .on('receipt', function(receipt){\r\n            console.log(receipt)\r\n            setSentUnstake(true)\r\n        })\r\n        setIsStaking(false)\r\n    }\r\n\r\n    const withdrawYield = async() => {\r\n        setSentWithdrawal(false)\r\n        let utils = { from: userAddress }\r\n        await hodlFarm.methods.withdrawYield().send(utils)\r\n        .on('receipt', function(receipt){\r\n            console.log(receipt)\r\n            setSentWithdrawal(true)\r\n        })\r\n    }\r\n\r\n\r\n    //waiting to fetch new balance after function call\r\n    //for dai\r\n\r\n    /*\r\n     * @notiThese useEffect hooks are triggered by the preceding functions.\r\n     *         The former hook fetches the Dai balances (Dai balance and stakingBalance).\r\n     *         The latter effect fetches the hodlToken balance and current yield.\r\n     */\r\n\r\n    useEffect(() => {\r\n        if(sentStake || sentUnstake){\r\n            loadDaiBalance(userAddress)\r\n            loadStakingBalance(userAddress)\r\n        }\r\n    }, [sentStake, sentUnstake, userAddress, loadDaiBalance, loadStakingBalance])\r\n\r\n\r\n        useEffect(() => {\r\n        if(sentWithdrawal){\r\n            loadHodlBalance(userAddress).then(res => {\r\n                setHodlBalance(res)\r\n            })\r\n            setHodlYield(0)\r\n        }\r\n    }, [sentWithdrawal, userAddress, loadHodlBalance, setHodlYield, setHodlBalance])\r\n\r\n    return (\r\n        <div>\r\n            <NavBar/>\r\n            <Container>\r\n                <Boxes>\r\n                    <StakeBox  \r\n                        stake={stake} \r\n                        unstake={unstake}\r\n                    />\r\n                    <YieldBox withdrawYield={withdrawYield}/> \r\n                </Boxes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}